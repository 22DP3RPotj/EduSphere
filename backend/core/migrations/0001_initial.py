# Generated by Django 5.2.1 on 2025-05-13 18:56

import backend.core.managers
import django.core.validators
import django.db.models.deletion
import django.db.models.functions.text
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('username', models.SlugField(max_length=200, unique=True)),
                ('name', models.CharField(max_length=200)),
                ('bio', models.TextField(blank=True, default='', validators=[django.core.validators.MaxLengthValidator(500)])),
                ('avatar', models.ImageField(blank=True, null=True, upload_to='avatars', validators=[django.core.validators.FileExtensionValidator(['svg', 'png', 'jpg', 'jpeg'])])),
                ('is_staff', models.BooleanField(default=False)),
                ('is_active', models.BooleanField(default=True)),
                ('date_joined', models.DateTimeField(auto_now_add=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'abstract': False,
            },
            managers=[
                ('objects', backend.core.managers.CustomUserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Topic',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, unique=True)),
            ],
            options={
                'ordering': [django.db.models.functions.text.Lower('name')],
                'constraints': [models.CheckConstraint(condition=models.Q(('name__regex', '^[A-Za-z]+$')), name='no_spaces_in_topic', violation_error_message='Topic name must consist of letters only.')],
            },
        ),
        migrations.CreateModel(
            name='Room',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=200)),
                ('slug', models.SlugField(max_length=200)),
                ('description', models.TextField(blank=True, default='', validators=[django.core.validators.MaxLengthValidator(500)])),
                ('updated', models.DateTimeField(auto_now=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('host', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='hosted_rooms', to=settings.AUTH_USER_MODEL)),
                ('participants', models.ManyToManyField(blank=True, related_name='participants', to=settings.AUTH_USER_MODEL)),
                ('topic', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.topic')),
            ],
            options={
                'ordering': ['-updated', '-created'],
            },
        ),
        migrations.CreateModel(
            name='Message',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('body', models.TextField(max_length=500, validators=[django.core.validators.MaxLengthValidator(500)])),
                ('edited', models.BooleanField(default=False)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('room', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.room')),
            ],
            options={
                'ordering': ['-created'],
                'indexes': [models.Index(fields=['room', 'created'], name='core_messag_room_id_82ae2b_idx'), models.Index(fields=['user'], name='core_messag_user_id_008e1a_idx')],
            },
        ),
        migrations.AddIndex(
            model_name='room',
            index=models.Index(fields=['host', 'name'], name='core_room_host_id_ec1d0c_idx'),
        ),
        migrations.AddIndex(
            model_name='room',
            index=models.Index(fields=['topic'], name='core_room_topic_i_552a3d_idx'),
        ),
        migrations.AddIndex(
            model_name='room',
            index=models.Index(fields=['updated'], name='core_room_updated_c625fe_idx'),
        ),
        migrations.AddConstraint(
            model_name='room',
            constraint=models.UniqueConstraint(fields=('host', 'name'), name='unique_room_per_host', violation_error_message='You already have a room with this name.'),
        ),
    ]
